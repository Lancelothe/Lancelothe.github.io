<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java8新特性（一） 之 Lambda表达式]]></title>
    <url>%2F2019%2F02%2F19%2FJava8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89-%E4%B9%8B-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Lambda表达式是什么Lambda表达式（lambda expression）是一个匿名函数，由数学中的λ演算而得名。在Java 8中可以把Lambda表达式理解为匿名函数，它没有名称，但是有参数列表、函数主体、返回类型等。 Lambda表达式的语法如下： (parameters) -&gt; { statements; } 为什么要使用Lambda表达式？前面你也看到了，在Java中使用内部类显得十分冗长，要编写很多样板代码，Lambda表达式正是为了简化这些步骤出现的，它使代码变得清晰易懂。 如何使用Lambda表达式Lambda表达式是为了简化内部类的，你可以把它当成是内部类的一种简写方式，只要是有内部类的代码块，都可以转化成Lambda表达式： 1234567891011// Comparator排序List&lt;Integer&gt; list = Arrays.asList(3, 1, 4, 5, 2);list.sort(new Comparator&lt;Integer&gt;() &#123; @Override public int compare(Integer o1, Integer o2) &#123; return o1.compareTo(o2); &#125;&#125;);// 使用Lambda表达式简化list.sort((o1, o2) -&gt; o1.compareTo(o2)); 12345678910// Runnable代码块Thread thread = new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println("Hello Man!"); &#125;&#125;);// 使用Lambda表达式简化Thread thread = new Thread(() -&gt; System.out.println("Hello Man!")); 可以看出，只要是内部类的代码块，就可以使用Lambda表达式简化，并且简化后的代码清晰易懂。 方法引用甚至，Comparator排序的Lambda表达式还可以进一步简化： list.sort(Integer::compareTo); 这种写法被称为 方法引用，方法引用是Lambda表达式的简便写法。如果你的Lambda表达式只是调用这个方法，最好使用名称调用，而不是描述如何调用，这样可以提高代码的可读性。 方法引用使用::分隔符，分隔符的前半部分表示引用类型，后面半部分表示引用的方法名称。例如：Integer::compareTo表示引用类型为Integer，引用名称为compareTo的方法。 对于 Lambda 表达式到方法引用的简化，我们提供以下规则： Lambda 表达式 方法引用 (args) -&gt; ClassName.staticMethod(args) ClassName::staticMethod (arg0, …) -&gt; arg0.instanceMethod(…) ClassName::instanceMethod (args) -&gt; expression.instanceMethod(args) expression::instanceMethod 特别的，对于构造函数的方法引用： ClassName::new类似使用方法引用的例子还有打印集合中的元素到控制台中：list.forEach(System.out::println);]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在默认安装openjdk的Linux系统中安装独立JDK]]></title>
    <url>%2F2019%2F01%2F02%2F%E5%A6%82%E4%BD%95%E5%9C%A8%E9%BB%98%E8%AE%A4%E5%AE%89%E8%A3%85openjdk%E7%9A%84Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85%E7%8B%AC%E7%AB%8BJDK%2F</url>
    <content type="text"><![CDATA[今天总结一下在Linux系统中卸载默认的openjdk改为我们自己独立安装的oracle的Jdk版本。就像我们在Windows上安装的环境一样。 1.卸载&amp;下载 2.解压安装 3.修改配置 4.选择使用JAVA的版本 5.测试 一、卸载&amp;下载 #### 1、卸载自带的opendjk #### rpm –qa|grep jdk rpm –e –nodeps jdk*** //将过滤出的结果进行卸载#### 2、下载一个Sun的JDK（现在应该叫oracle的JDK）。 ####下一个自解压的tar包。这里我下载的是jdk-7u79-linux-x64.tar.gz下载地址 : 点击这里 二、解压安装 1.解压jdk-7u79-linux-x64.tar.gz 2.将解压后jdk-7u79-linux-x64.tar.gz复制到/usr/java下 三、修改配置 #### 方法1：修改/etc/profile 文件 ####所有用户的 shell都有权使用这些环境变量 在 shell终端执行命令：vi /etc/profile 在 profile文件末尾加入： JAVA_HOME=/usr/jdk1.7.0_79 JRE_HOME=/usr/local/java/jdk1.7.0_79/jre PATH=$JAVA_HOME/bin:$PATH CLASSPATH=.:$JAVA_HOME/lib/dt.jar: $JAVA_HOME/lib/tools.jar export JAVA_HOME,JRE_HOME,PATH,CLASSPATHPS：上面我们说的修改配置系统环境变量是在Unix操作系统下面的。下面来说说在DOS系统下面如何更改配置系统环境变量。#### DOS: ####1. 在系统变量里新建JAVA_HOME变量，变量值为：D:\others\JAVA\JDK（根据自己的安装路径填写）2. 新建Classpath变量，在Classpath变量（已存在不用新建）添加变量值，变量值为：.;%JAVA\_HOME%\lib;%JAVA_HOME%\lib\tools.jar;3. 在path变量（已存在不用新建）添加变量值：%JAVA\_HOME%\bin;%JAVA_HOME%\jre\bin（注意变量值之间用“;”隔开）eg:;%JAVA\_HOME%\lib;%JAVA\_HOME%\lib\tools.jar;%JAVA\_HOME%\bin;%JAVA\_HOME%\jre\bin;4. 测试是否配置成功在dos中，输入命令java，回车后应该会出现java的各种命令；javac 出现相关编译的命令；java -version 出现jdk版本号补充环境变量的解析:JAVA_HOME:jdk的安装路径Classpath:java加载类路径，只有类在classpath中java命令才能识别，在路径前加了个”.”表示当前路径。path：系统在任何路径下都可以识别java,javac命令。重启系统ps: 如果你不想重新系统，可以用命令source /etc/profile使配置文件立即生效。否则只能重启系统才能使配置参数生效。然后我们可以通过 echo $JAVA_HOME echo $PATH echo $CLASSPATH查看配置的信息。但是我最后还是重启了才真正生效。#### 方法2：修改.bashrc文件 ####如果你需要给某个用户权限使用这些环境变量，你只需要修改其个人用户主目录下的.bashrc就可以了,而不像第一种方法给所有用户权限。在 shell终端执行命令：vi ~/.bashrc在.bashrc文件末尾加入： set JAVA_HOME=/usr/jdk1.7.0_79 export JAVA_HOME set PATH=$JAVA_HOME/bin:$PATH export PATH set CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export CLASSPATH重新登录注意：Linux使用:(冒号)而不是;(分号)来分隔路径 四、选择使用JAVA的版本 更新参数使配置生效 update-alternatives --install /usr/bin/java java /usr/jdk1.7.0\_79/bin/java 300 update-alternatives --install /usr/bin/javac javac /usr/jdk1.7.0\_79/bin/javac 300 选择需要使用的版本在终端输入命令：update-alternatives –config java 五、测试 进行完如上配置后，就可以进行测试了在DOS或终端下输入 java -version，然后输出显示，显示出来的是当前系统JRE的最高版本我这里显示的是： ps：环境变量配置文件在Ubuntu中有如下几个文件可以设置环境变量 /etc/profile:在登录时,操作系统定制用户环境时使用的第一个文件,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。 /etc/environment:在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量。 ~/.bash_profile:在登录时用到的第三个文件是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取. ~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。几个环境变量的优先级1&gt;2&gt;3]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Hexo + GitHub搭建免费的个人博客]]></title>
    <url>%2F2019%2F01%2F01%2F%E5%88%A9%E7%94%A8Hexo-GitHub%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[今天给大家带来一份用Hexo + Github 搭建属于自己的个人博客的教程。其实现在这种博客的搭建方式有很多种。最早我见的是Jekyll、接下来这个Hexo，最近在研究Python发现用Flask和Django都可以搭建的，只是路数不同罢了。我选择了这个Hexo，目前这个用的人也比较多，应该说是简单易搭建吧，可扩展也可自己美化。话不多说，下面就开始。 1.环境配置 2.Hexo安装部署 3.错误总结 1.环境配置首先要明确有几个环境是必须有的。没有的话请先安装。 Git（官网下载较慢，我建议用这个网址gitb,org） 作用：用来提交Hexo的内容。 nodejs（我建议用v4.*版本较好，官网有6.*和8.*的我装上后有点问题） 作用：用来生成静态页面的。 Github的账号（自己申请，并创建一个名为yourname.github.io的仓库） 自行安装完环境后，将自己 SSH key导入到申请的GitHub中。建议导入，不然后面每次提交代码都要手动输入GitHub的账号密码，相当麻烦。 2.Hexo安装部署Hexo的安装也相当简单，以Windows为例： $ cd d:/hexo$ npm install hexo-cli -g # -g代表全局安装$ hexo init blog # 初始化blog目录$ cd blog$ npm install # 安装依赖的组件$ hexo g # 或者hexo generate$ hexo s # 或者hexo server，可以在http://localhost:4000/ 查看说几个比较常用的命令: hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹 hexo server (hexo s) 启动本地web服务，用于博客的本地预览 hexo deploy (hexo d) 发布博客到远端 hexo clena 清除hexo g生成的本地缓存 hexo new “postName” #新建文章 hexo new page “pageName” #新建页面 还有一些常用的组合hexo d -g #生成后+远程部署hexo s -g #生成后+本地预览 现在我们来看一下本地预览的效果吧hexo ghexo s 其实这里有个问题，默认的4000端口我在Windows上一直打不开，我没有在配置文件中重新设置，所以我每次启动的时候都会用这个命令指定端口hexo s -p 40000 我直接加了个0，用了40000端口。出现下面这个就说明你可以开始用网页在本地预览了。 INFO Start processingINFO Hexo is running at http://localhost:40000/. Press Ctrl+C to stop.预览图如下： 然后你就可以发布到你的Github上了用命令hexo d 即可。但是我们发现需要输入Github的账号密码，所以这里还需要配置你的Github的地址，编辑本地的_config.yml 文件，这是关于Hexo的配置文件。找到如下配置项：deploy: type: git repository: git@github.com:Lancelothe/Lancelothe.github.io.git branch: master按照我的格式填写即可，我的Github名字是Lancelothe，所以你需要将这个改为你的名字。关于type和repository的格式似乎在Hexo3.0版本以上就是需要这样写，以前好像type可以写成github.如何查看你的Hexo版本呢？ 用hexo -v命令hexo: 3.3.7hexo-cli: 1.0.3os: Windows_NT 6.1.7601 win32 x64http_parser: 2.5.2node: 4.4.2v8: 4.5.103.35uv: 1.8.0zlib: 1.2.8ares: 1.10.1-DEVicu: 56.1modules: 46openssl: 1.0.2g到此为止，你的Hexo个人博客就已经搭建完毕了。下面来看看搭建过程中哪些可能遇到的问题 3.错误总结 问题1：npm install 报 command not found原因：PATH配置不对。解决：选择『计算机』-『属性』-『高级系统设置』-『环境变量』，先查看了『系统变量』部分，发现安装后确实在系统变量的Path后追加了安装路径，即：C:\Program Files\nodejs；然后，打开『用户环境变量』部分查看了下Path的值，发现在最后系统自动加入了C:\Users\s94983\AppData\Roaming\npm，在『用户环境变量』部分的Path下再追加C:\Program Files\nodejs，然后关闭掉git base，（有可能需要重启电脑才可生效）问题解决！ 问题2：hexo deploy时重复输入用户名密码的问题原因：repository配置时没有采用git@github.com的形式，而是采用了老的https://github.com解决：采用git@github.com形式即可。 问题3：ERROR Deployer not found: git 或者 ERROR Deployer not found: github原因：未安装依赖包解决：使用 npm install hexo-deployer-git --save 安装依赖 问题4：npm安装时下载速度慢解决： 可以换成淘宝的镜像源。镜像举例：1.临时使用npm --registry https://registry.npm.taobao.org install express 2.持久使用npm config set registry https://registry.npm.taobao.org// 配置后可通过下面方式来验证是否成功npm config get registry// 或npm info express 3.通过cnpm 使用npm install -g cnpm --registry=https://registry.npm.taobao.org// 使用cnpm install expresstall express 后面还会为大家带来Hexo的高级用法的，谢谢支持。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
